create table public.users (
  id serial not null,
  username character varying(50) not null,
  password character varying(255) not null,
  role character varying(20) null default 'admin'::character varying,
  first_name character varying(100) null,
  last_name character varying(100) null,
  phone character varying(20) null,
  department character varying(100) null,
  position character varying(100) null,
  employee_id character varying(50) null,
  license_number character varying(100) null,
  specialization text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  avatar_url text null,
  bio text null,
  date_of_birth date null,
  gender character varying(20) null,
  address text null,
  city character varying(100) null,
  state character varying(100) null,
  zip_code character varying(20) null,
  country character varying(100) null,
  emergency_contact_name character varying(255) null,
  emergency_contact_phone character varying(50) null,
  emergency_contact_relationship character varying(100) null,
  last_login timestamp with time zone null,
  login_count integer null default 0,
  password_hash text null,
  constraint users_pkey primary key (id),
  constraint users_employee_id_key unique (employee_id),
  constraint users_username_key unique (username),
  constraint users_role_check check (
    (
      (role)::text = any (
        (
          array[
            'admin'::character varying,
            'superadmin'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create trigger create_user_defaults_trigger
after INSERT on users for EACH row
execute FUNCTION create_user_defaults ();

create trigger update_users_updated_at BEFORE
update on users for EACH row
execute FUNCTION update_updated_at_column ();

create table public.user_files (
  id bigserial not null,
  user_id bigint null,
  file_type character varying(50) not null,
  file_name character varying(255) not null,
  file_path text not null,
  file_size bigint null,
  mime_type character varying(100) null,
  is_current boolean null default true,
  uploaded_at timestamp with time zone null default now(),
  constraint user_files_pkey primary key (id),
  constraint user_files_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_user_files_user_id on public.user_files using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_user_files_type on public.user_files using btree (file_type, is_current) TABLESPACE pg_default;

create table public.user_activity (
  id serial not null,
  user_id integer null,
  action character varying(50) not null,
  category character varying(100) null,
  description text null,
  timestamp timestamp with time zone null default now(),
  user_agent text null,
  severity character varying(20) null default 'info'::character varying,
  details jsonb null,
  constraint user_activity_pkey primary key (id),
  constraint user_activity_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE,
  constraint user_activity_severity_check check (
    (
      (severity)::text = any (
        (
          array[
            'info'::character varying,
            'warning'::character varying,
            'error'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_user_activity_user_id on public.user_activity using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_user_activity_timestamp on public.user_activity using btree ("timestamp") TABLESPACE pg_default;

create index IF not exists idx_user_activity_action on public.user_activity using btree (action) TABLESPACE pg_default;